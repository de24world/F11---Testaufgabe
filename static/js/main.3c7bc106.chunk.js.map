{"version":3,"sources":["components/LanguageSwitcher/LanguageSwitcher.js","components/updateAction.js","components/Form/Form.js","components/Result/Result.js","App.js","reportWebVitals.js","locales/i18next.js","index.js"],"names":["LanguageSwitcher","useTranslation","t","i18n","className","value","language","onChange","e","changeLanguage","target","updateAction","state","payload","data","withTranslation","props","action","useStateMachine","useForm","register","handleSubmit","watch","errors","showVersion","topic","showNumber","onSubmit","console","log","history","push","name","ref","required","type","placeholder","pattern","email","version","telefon","description","Result","JSON","stringify","createStore","exact","path","component","Form","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","resource","en","translation","de","use","Backend","LanguageDetector","initReactI18next","init","react","useSuspense","resources","fallbackLng","debug","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.3c7bc106.chunk.js","sourcesContent":["import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./LanguageSwitcher.scss\";\n\nconst LanguageSwitcher = () => {\n  const { t, i18n } = useTranslation();\n\n  return (\n    <div className=\"LanguageSwitcher\">\n      <select\n        value={i18n.language}\n        onChange={(e) => i18n.changeLanguage(e.target.value)}\n      >\n        <option value=\"en\">{t(\"English\")}</option>\n        <option value=\"de\">{t(\"German\")}</option>\n      </select>\n    </div>\n  );\n};\n\nexport default LanguageSwitcher;\n","export default function updateAction(state, payload) {\n  return {\n    ...state,\n    data: {\n      ...state.data,\n      ...payload,\n    },\n  };\n}\n","import \"./Form.scss\";\n\nimport { useForm } from \"react-hook-form\";\n\nimport { withTranslation } from \"react-i18next\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useStateMachine } from \"little-state-machine\";\nimport updateAction from \"../updateAction\";\n\nconst Form = (props) => {\n  const { t } = useTranslation();\n\n  const { action } = useStateMachine(updateAction);\n  const { register, handleSubmit, watch, errors } = useForm({});\n  const onSubmit = (data) => {\n    console.log(data);\n    action(data);\n    props.history.push(\"/result\");\n  };\n\n  const showVersion = watch(\"topic\", props.topic);\n  const showNumber = watch(\"topic\", props.topic);\n\n  return (\n    <form className=\"Form\" onSubmit={handleSubmit(onSubmit)}>\n      <label>Name *</label>\n      <input name=\"name\" ref={register({ required: true })} />\n      {errors.name && errors.name.type === \"required\" && <p>{t(\"Required\")}</p>}\n\n      <label>{t(\"E-mail address\")} *</label>\n      <input\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"xxx@xx.xx\"\n        ref={register({\n          required: true,\n          pattern: {\n            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n          },\n        })}\n      />\n      {errors.email && (\n        <p>\n          {t(\"Invalid\")} {t(\"E-mail address\")}\n        </p>\n      )}\n\n      <label>{t(\"Topic\")} *</label>\n      <select name=\"topic\" ref={register({ required: true })}>\n        <option value=\"\">{t(\"Choose one\")}</option>\n        <option value=\"general\">{t(\"General\")}</option>\n        <option value=\"softwareerros\">{t(\"Software Errors\")}</option>\n        <option value=\"recall\">{t(\"Recall\")}</option>\n      </select>\n      {errors.topic && errors.topic.type === \"required\" && (\n        <p>{t(\"Required\")}</p>\n      )}\n\n      {showVersion === \"softwareerros\" && (\n        <>\n          <label>Version *</label>\n          <input\n            name=\"version\"\n            placeholder=\"Version : X.X.X (1.0.0 / 1.11.12)\"\n            ref={register({\n              required: true,\n              pattern: {\n                value: /^[0-9]*\\.[0-9]*\\.[0-9]{1,2}$/,\n              },\n            })}\n          />\n          {errors.version && <p>{t(\"Invalid\")} Version</p>}\n        </>\n      )}\n\n      {showNumber === \"recall\" && (\n        <>\n          <label>{t(\"Phone Number\")}*</label>\n          <input\n            name=\"telefon\"\n            ref={register({\n              required: true,\n            })}\n          />\n          {errors.telefon && <p>{t(\"Required\")}</p>}\n        </>\n      )}\n\n      <label>{t(\"Description\")} *</label>\n      <textarea name=\"description\" ref={register({ required: true })} />\n      {errors.description && errors.description.type === \"required\" && (\n        <p>{t(\"Required\")}</p>\n      )}\n      <button type=\"submit\" name=\"submitButton\">\n        Button\n      </button>\n    </form>\n  );\n};\n\nexport default withTranslation()(Form);\n","import React from \"react\";\nimport { useStateMachine } from \"little-state-machine\";\nimport updateAction from \"../updateAction\";\n\nconst Result = (props) => {\n  const { state } = useStateMachine(updateAction);\n\n  return (\n    <>\n      <h2>Result:</h2>\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n    </>\n  );\n};\n\nexport default Result;\n","import React from \"react\";\n\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport { StateMachineProvider, createStore } from \"little-state-machine\";\n\nimport { withTranslation } from \"react-i18next\";\nimport { useTranslation } from \"react-i18next\";\n\nimport LanguageSwitcher from \"./components/LanguageSwitcher/LanguageSwitcher\";\nimport Form from \"./components/Form/Form\";\nimport Result from \"./components/Result/Result\";\n\nimport \"./App.scss\";\n\ncreateStore({\n  data: {},\n});\n\nconst App = () => {\n  const { t } = useTranslation();\n\n  return (\n    <StateMachineProvider>\n      <h1> {t(\"SupportForm\")}</h1>\n      <LanguageSwitcher />\n\n      <Router>\n        <Route exact path=\"/\" component={Form} />\n        <Route path=\"/result\" component={Result} />\n      </Router>\n    </StateMachineProvider>\n  );\n};\n\nexport default withTranslation()(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport translationEN from \"./en/translation.json\";\nimport translationDE from \"./de/translation.json\";\n\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst resource = {\n  en: {\n    translation: translationEN,\n  },\n  de: {\n    translation: translationDE,\n  },\n};\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i67yu18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    react: {\n      useSuspense: false,\n    },\n    resources: resource,\n    fallbackLng: \"en\",\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n  });\n\nexport default i18n;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./locales/i18next\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={<div>Loading...</div>}>\n      <App />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}